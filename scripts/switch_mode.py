#!/usr/bin/env python3
"""
Script to easily switch between development and production modes.
"""

import os
import sys
import argparse
from pathlib import Path

def get_env_file_path():
    """Find the .env file in the project root."""
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"
    return env_file

def read_env_file():
    """Read the current .env file."""
    env_file = get_env_file_path()
    if not env_file.exists():
        return {}
    
    env_vars = {}
    with open(env_file, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key] = value
    return env_vars

def write_env_file(env_vars):
    """Write the .env file."""
    env_file = get_env_file_path()
    with open(env_file, 'w') as f:
        f.write("# Scheduly Backend Configuration\n")
        f.write("# Generated by switch_mode.py\n\n")
        
        # Write APP_MODE first
        if 'APP_MODE' in env_vars:
            f.write(f"APP_MODE={env_vars['APP_MODE']}\n")
        
        # Write other variables
        for key, value in sorted(env_vars.items()):
            if key != 'APP_MODE':
                f.write(f"{key}={value}\n")

def switch_to_development():
    """Switch to development mode."""
    env_vars = read_env_file()
    env_vars['APP_MODE'] = 'development'
    write_env_file(env_vars)
    print("✅ Switched to DEVELOPMENT mode")
    print("   - Uses hardcoded Pitt CS data")
    print("   - No AI API calls (no rate limiting)")
    print("   - Fast response times")
    print("   - Only supports Pitt University")

def switch_to_production():
    """Switch to production mode."""
    env_vars = read_env_file()
    env_vars['APP_MODE'] = 'production'
    
    # Check if GEMINI_API_KEY is set
    if 'GEMINI_API_KEY' not in env_vars or not env_vars['GEMINI_API_KEY']:
        print("⚠️  Warning: GEMINI_API_KEY not set. Production mode requires an API key.")
        print("   Set it in your .env file or environment variables.")
    
    write_env_file(env_vars)
    print("✅ Switched to PRODUCTION mode")
    print("   - Uses AI-generated requirements for any university")
    print("   - AI-searched prerequisites")
    print("   - Multi-university support")
    print("   - Full agentic behavior")

def show_current_mode():
    """Show the current mode."""
    env_vars = read_env_file()
    current_mode = env_vars.get('APP_MODE', 'development')
    
    print(f"Current mode: {current_mode.upper()}")
    
    if current_mode == 'development':
        print("   - Uses hardcoded Pitt CS data")
        print("   - No AI API calls")
        print("   - Fast response times")
        print("   - Only supports Pitt University")
    else:
        print("   - Uses AI-generated requirements")
        print("   - AI-searched prerequisites")
        print("   - Multi-university support")
        print("   - Full agentic behavior")

def main():
    parser = argparse.ArgumentParser(description="Switch Scheduly backend between development and production modes")
    parser.add_argument('mode', nargs='?', choices=['dev', 'development', 'prod', 'production', 'status'], 
                       help='Mode to switch to (dev/development, prod/production, or status)')
    
    args = parser.parse_args()
    
    if not args.mode or args.mode in ['status']:
        show_current_mode()
    elif args.mode in ['dev', 'development']:
        switch_to_development()
    elif args.mode in ['prod', 'production']:
        switch_to_production()
    
    print(f"\nTo restart the server with the new mode:")
    print("   uvicorn app:app --reload --port 8000")

if __name__ == "__main__":
    main()
